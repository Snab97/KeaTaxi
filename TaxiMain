import java.util.List;
import java.util.Scanner;

public class MainGame {
    public static void main(String[] args) {
        Taxi.displayIntroduction();
        keaTaxi();
    }

    public static void keaTaxi() {
        // Create scanner object
        Scanner input = new Scanner(System.in);

        // Map size, obstacle amount, max obstacle amount = n% of x * y
        int x;
        int y;
        int obs;
        int max;
        final double maxObs = 0.5;

        do {
            System.out.print("x: ");
            x = input.nextInt();
            System.out.print("y: ");
            y = input.nextInt();
            max = (int) (x * y * maxObs);
        } while (x * y < 4);

        do {
            System.out.printf("Max obstacle amount for %d * %d: %d\n", x, y, max);
            System.out.print("Obstacles: ");
            obs = input.nextInt();
        } while (obs > max || x * y <= 1);
        System.out.println();

        // Create Taxi object
        Taxi game = new Taxi(x, y, obs);
        final int spawn = game.setSpawn();
        int exit = game.setExit(spawn);
        int playerPosition = spawn;

        List<Integer> obstacles = game.setObstacles(spawn, exit);
        List<Integer> map = game.setPositions(playerPosition, exit, obstacles);
        List<Integer> mapPath = game.setPositions(playerPosition, exit, obstacles);
        Board mapRefresh = new Board(x, y, playerPosition, map, mapPath);

        int moves = 0;
        boolean valid = false;

        // Enter game loop
        while (playerPosition != exit) {
            mapRefresh.createMap(map);
            System.out.println("Move options: N, S, E, W, NE, NW, SE, SW.");
            System.out.print("Direction: ");
            String movement = input.next().toUpperCase();
            System.out.println();

            switch (movement) {
                // North
                case "N" -> {
                    valid = !(playerPosition < x
                            || map.get(playerPosition - x) == 3);
                    if (!valid) {
                        break;
                    }
                    moves++;
                    playerPosition = mapRefresh.moveNorth();
                }
                //North East
                case "NE" -> {
                    valid = !(playerPosition < x
                            || playerPosition == (playerPosition / x + 1) * x - 1
                            || map.get(playerPosition - x + 1) == 3);
                    if (!valid) {
                        break;
                    }
                    moves++;
                    playerPosition = mapRefresh.moveNorthEast();
                }
                // North West
                case "NW" -> {
                    valid = !(playerPosition < x
                            || playerPosition == (playerPosition / x) * x
                            || map.get(playerPosition - x - 1) == 3);
                    if (!valid) {
                        break;
                    }
                    moves++;
                    playerPosition = mapRefresh.moveNorthWest();
                }
                // East
                case "E" -> {
                    valid = !(playerPosition == map.size() - 1
                            || map.get(playerPosition + 1) == 3
                            || playerPosition == (playerPosition / x + 1) * x - 1);
                    if (!valid) {
                        break;
                    }
                    moves++;
                    playerPosition = mapRefresh.moveEast();
                }
                // West
                case "W" -> {
                    valid = !(playerPosition == 0
                            || map.get(playerPosition - 1) == 3
                            || playerPosition == (playerPosition / x) * x);
                    if (!valid) {
                        break;
                    }
                    moves++;
                    playerPosition = mapRefresh.moveWest();
                }
                // South
                case "S" -> {
                    valid = !(playerPosition > x * y - x - 1
                            || map.get(playerPosition + x) == 3);
                    if (!valid) {
                        break;
                    }
                    moves++;
                    playerPosition = mapRefresh.moveSouth();
                }
                // South East
                case "SE" -> {
                    valid = !(playerPosition == (playerPosition / x + 1) * x - 1
                            || playerPosition > x * y - x - 1
                            || map.get(playerPosition + x + 1) == 3);
                    if (!valid) {
                        break;
                    }
                    moves++;
                    playerPosition = mapRefresh.moveSouthEast();
                }
                // South West
                case "SW" -> {
                    valid = !(playerPosition > x * y - x - 1
                            || playerPosition == (playerPosition / x) * x
                            || map.get(playerPosition + x - 1) == 3);
                    if (!valid) {
                        break;
                    }
                    moves++;
                    playerPosition = mapRefresh.moveSouthWest();
                }
                default -> System.out.println("Invalid move");
            }
            // When valid becomes false
            if (!valid) {
                System.out.println("Invalid move");
            }
            // Exit while loop
        }
        mapRefresh.createMap(map);
        System.out.printf("Found the exit in %d moves.\n", moves);

        // Path taken
        System.out.print("Want to see the path you have taken? y/n: ");
        char seePath = input.next().toLowerCase().charAt(0);
        switch (seePath) {
            case 'y' -> {
                mapPath.set(spawn, 1);
                mapPath.set(exit, 2);
                mapRefresh.createMap(mapPath);
                System.out.println("Path taken");
            }
            case 'n' -> System.out.println(":/");
            default -> {
            }
        }
        // Replay
        System.out.print("Play again? y/n: ");
        char playAgain = input.next().toLowerCase().charAt(0);
        switch (playAgain) {
            case 'y' -> {
                System.out.println();
                keaTaxi();
            }
            case 'n' -> System.out.println("Exiting..");
            default -> {
            }
            // End of program
        }
    }
}
